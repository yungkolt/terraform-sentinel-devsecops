name: Continuous Integration

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

env:
  TF_VERSION: '1.5.0'

jobs:
  # =============================================================================
  # CODE QUALITY & FORMATTING
  # =============================================================================
  
  terraform-fmt:
    name: Terraform Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Format Check
        run: terraform fmt -check -recursive

  # =============================================================================
  # VALIDATION & LINTING
  # =============================================================================
  
  terraform-validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Initialize Terraform
        run: terraform init -backend=false
        working-directory: environments/${{ matrix.environment }}
      
      - name: Validate Terraform
        run: terraform validate
        working-directory: environments/${{ matrix.environment }}
      
      - name: Validate Modules
        run: |
          for module in modules/*/; do
            if [ -f "$module/main.tf" ]; then
              echo "‚úÖ Validating $module"
              cd "$module"
              terraform init -backend=false
              terraform validate
              cd - > /dev/null
            fi
          done

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================
  
  security-scanning:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: TFSec Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: true
          format: sarif
          output: tfsec-results.sarif
          additional_args: --minimum-severity MEDIUM
          
      - name: Upload TFSec Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('tfsec-results.sarif') != ''
        with:
          sarif_file: tfsec-results.sarif
          category: tfsec
      
      - name: Checkov Policy Scanning
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true
          skip_check: CKV_AZURE_33,CKV_AZURE_35
          
      - name: Upload Checkov Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('checkov-results.sarif') != ''
        with:
          sarif_file: checkov-results.sarif
          category: checkov
      
      - name: TruffleHog Secret Detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified --fail
        continue-on-error: true

  # =============================================================================
  # KQL QUERY VALIDATION
  # =============================================================================
  
  kql-validation:
    name: KQL Query Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate KQL Queries
        shell: pwsh
        run: |
          Write-Host "üîç Validating KQL queries in detection rules..." -ForegroundColor Cyan
          
          $files = Get-ChildItem -Path "." -Filter "*.tf" -Recurse
          $queryCount = 0
          $validQueries = 0
          $issues = @()
          
          foreach ($file in $files) {
              $content = Get-Content -Path $file.FullName -Raw
              $matches = [regex]::Matches($content, '(?s)query\s*=\s*<<-EOQ\s*(.*?)\s*EOQ')
              
              foreach ($match in $matches) {
                  $queryCount++
                  $query = $match.Groups[1].Value.Trim()
                  
                  # Basic KQL validation
                  if ($query -match '^\s*\w+\s*\|') {
                      $validQueries++
                      Write-Host "‚úÖ Valid KQL query $queryCount in $($file.Name)" -ForegroundColor Green
                  } else {
                      $issues += "‚ö†Ô∏è Potential KQL syntax issue in $($file.Name)"
                      Write-Warning "‚ö†Ô∏è Potential KQL syntax issue in $($file.Name)"
                  }
                  
                  # Check for common patterns
                  if ($query -notmatch '\|\s*(where|summarize|project|extend)') {
                      $issues += "‚ö†Ô∏è Query may be missing common KQL operators in $($file.Name)"
                  }
              }
          }
          
          Write-Host "üìä KQL Validation Summary:" -ForegroundColor Cyan
          Write-Host "  Total queries found: $queryCount"
          Write-Host "  Valid queries: $validQueries"
          Write-Host "  Potential issues: $($issues.Count)"
          
          if ($issues.Count -gt 0) {
              Write-Host "Issues found:" -ForegroundColor Yellow
              $issues | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
          }

  # =============================================================================
  # DOCUMENTATION VALIDATION
  # =============================================================================
  
  docs-validation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check Required Files
        run: |
          echo "üîç Checking for required documentation files..."
          
          required_files=("README.md" "DEPLOYMENT.md" "LICENSE")
          missing_files=()
          
          for file in "${required_files[@]}"; do
            if [[ ! -f "$file" ]]; then
              missing_files+=("$file")
            else
              echo "‚úÖ Found $file"
            fi
          done
          
          if [[ ${#missing_files[@]} -gt 0 ]]; then
            echo "‚ùå Missing required files: ${missing_files[*]}"
            exit 1
          fi
          
          echo "‚úÖ All required documentation files present"
      
      - name: Validate Markdown Links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'no'
          config-file: '.github/mlc_config.json'
        continue-on-error: true

  # =============================================================================
  # CI SUMMARY
  # =============================================================================
  
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [terraform-fmt, terraform-validate, security-scanning, kql-validation, docs-validation]
    if: always()
    steps:
      - name: CI Results Summary
        run: |
          echo "## üîç Continuous Integration Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Format | ${{ needs.terraform-fmt.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform Validation | ${{ needs.terraform-validate.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scanning | ${{ needs.security-scanning.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| KQL Validation | ${{ needs.kql-validation.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Documentation | ${{ needs.docs-validation.result == 'success' && '‚úÖ Pass' || '‚ùå Fail' }} |" >> $GITHUB_STEP_SUMMARY

name: Sentinel DevSecOps Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write  # For PR comments

env:
  TF_VERSION: '1.5.0'
  WORKING_DIR: 'environments/prod'

jobs:
  # Step 1: Basic validation and formatting
  validate:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        continue-on-error: true
      
      - name: Initialize Terraform (Production)
        run: terraform init -backend=false
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Validate Production Environment
        run: terraform validate
        working-directory: ${{ env.WORKING_DIR }}
      
      - name: Validate All Modules
        run: |
          for module in modules/*/; do
            if [ -f "$module/main.tf" ]; then
              echo "✅ Validating $module"
              cd "$module"
              terraform init -backend=false
              terraform validate
              cd - > /dev/null
            fi
          done

  # Step 2: Security scanning (runs in parallel with validation)
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for TruffleHog
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Initialize Terraform (for scanning)
        run: terraform init -backend=false
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
      
      - name: TFSec Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: true
          format: sarif
          output: tfsec-results.sarif
          additional_args: --minimum-severity MEDIUM
          
      - name: Upload TFSec Results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('tfsec-results.sarif') != ''
        with:
          sarif_file: tfsec-results.sarif
          category: tfsec
      
      - name: Checkov Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true
          skip_check: CKV_AZURE_33,CKV_AZURE_35
          
      - name: Upload Checkov Results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('checkov-results.sarif') != ''
        with:
          sarif_file: checkov-results.sarif
          category: checkov
      
      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

  # Step 3: Terraform planning (only on PRs, requires validation + security to pass)
  plan:
    name: Terraform Plan
    needs: [validate, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        continue-on-error: true  # Don't fail if credentials aren't set up yet
      
      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true  # Don't fail if backend isn't configured
      
      - name: Terraform Plan
        run: terraform plan -no-color
        working-directory: ${{ env.WORKING_DIR }}
        continue-on-error: true
        id: plan
      
      - name: Comment PR with Plan
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `## Terraform Plan Results
            
            #### Terraform Format and Validation 🖌\`${{ needs.validate.result }}\`
            #### Security Scanning 🔒\`${{ needs.security-scan.result }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan Output</summary>
            
            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  # Step 4: KQL Query Validation (optional, runs in parallel)
  kql-validation:
    name: KQL Query Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate KQL Queries
        shell: pwsh
        run: |
          # Simple KQL validation
          $files = Get-ChildItem -Path "." -Filter "*.tf" -Recurse
          $queryCount = 0
          
          foreach ($file in $files) {
              $content = Get-Content -Path $file.FullName -Raw
              $matches = [regex]::Matches($content, '(?s)query\s*=\s*<<-EOQ\s*(.*?)\s*EOQ')
              
              foreach ($match in $matches) {
                  $queryCount++
                  $query = $match.Groups[1].Value.Trim()
                  if ($query -match '^\s*\w+\s*\|') {
                      Write-Host "✅ Valid KQL query $queryCount in $($file.Name)"
                  } else {
                      Write-Warning "⚠️ Potential KQL issue in $($file.Name)"
                  }
              }
          }
          
          Write-Host "📊 Total KQL queries validated: $queryCount"

name: Continuous Deployment

on:
  push:
    branches: [main]
    paths:
      - 'environments/**'
      - 'modules/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      force_deploy:
        description: 'Force deployment (skip plan approval)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read
  id-token: write  # For OIDC authentication
  pull-requests: write

env:
  TF_VERSION: '1.5.0'
  ARM_USE_OIDC: true

jobs:
  # =============================================================================
  # DETERMINE DEPLOYMENT STRATEGY
  # =============================================================================
  
  determine-deployments:
    name: Determine Deployment Strategy
    runs-on: ubuntu-latest
    outputs:
      environments: ${{ steps.determine.outputs.environments }}
      deploy_dev: ${{ steps.determine.outputs.deploy_dev }}
      deploy_staging: ${{ steps.determine.outputs.deploy_staging }}
      deploy_prod: ${{ steps.determine.outputs.deploy_prod }}
    steps:
      - name: Determine Deployment Targets
        id: determine
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual deployment
            echo "environments=[\"${{ github.event.inputs.environment }}\"]" >> $GITHUB_OUTPUT
            echo "deploy_${{ github.event.inputs.environment }}=true" >> $GITHUB_OUTPUT
          else
            # Automatic deployment based on branch
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              # Deploy to all environments in sequence
              echo "environments=[\"dev\", \"staging\", \"prod\"]" >> $GITHUB_OUTPUT
              echo "deploy_dev=true" >> $GITHUB_OUTPUT
              echo "deploy_staging=true" >> $GITHUB_OUTPUT
              echo "deploy_prod=true" >> $GITHUB_OUTPUT
            fi
          fi

  # =============================================================================
  # DEVELOPMENT ENVIRONMENT DEPLOYMENT
  # =============================================================================
  
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: determine-deployments
    if: needs.determine-deployments.outputs.deploy_dev == 'true'
    environment:
      name: development
      url: https://portal.azure.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: environments/staging

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: environments/staging

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: environments/staging

      - name: Output Deployment Info
        run: |
          echo "## 🔄 Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
          terraform output -json > outputs.json
          echo "**Workspace ID:** $(jq -r '.workspace_id.value' outputs.json)" >> $GITHUB_STEP_SUMMARY
          echo "**Detection Rules:** $(jq -r '.detection_rules.value | length' outputs.json)" >> $GITHUB_STEP_SUMMARY
        working-directory: environments/staging

  # =============================================================================
  # PRODUCTION ENVIRONMENT DEPLOYMENT
  # =============================================================================
  
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [determine-deployments, deploy-staging]
    if: needs.determine-deployments.outputs.deploy_prod == 'true' && always() && (needs.deploy-staging.result == 'success' || needs.deploy-staging.result == 'skipped')
    environment:
      name: production
      url: https://portal.azure.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: environments/prod

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: environments/prod

      # Production requires manual approval via GitHub Environments
      - name: Production Deployment Approval
        if: github.event.inputs.force_deploy != 'true'
        run: |
          echo "🔒 Production deployment requires manual approval"
          echo "This step will wait for approval in GitHub Environments"

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: environments/prod

      - name: Output Deployment Info
        run: |
          echo "## 🎯 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
          terraform output -json > outputs.json
          echo "**Workspace ID:** $(jq -r '.workspace_id.value' outputs.json)" >> $GITHUB_STEP_SUMMARY
          echo "**Detection Rules Deployed:** $(jq -r '.rule_count.value' outputs.json)" >> $GITHUB_STEP_SUMMARY
          echo "**MITRE ATT&CK Tactics:** $(jq -r '.detection_rules_deployed.value | keys | join(", ")' outputs.json)" >> $GITHUB_STEP_SUMMARY
        working-directory: environments/prod

      - name: Post-Deployment Security Check
        run: |
          echo "🔍 Running post-deployment security validation..."
          # Validate that Sentinel is properly configured
          az sentinel workspace show \
            --resource-group $(jq -r '.resource_group_name.value' outputs.json) \
            --workspace-name $(basename $(jq -r '.workspace_id.value' outputs.json)) \
            --query "properties.provisioningState" -o tsv
        working-directory: environments/prod

  # =============================================================================
  # DEPLOYMENT NOTIFICATION
  # =============================================================================
  
  notify-deployment:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Development | ${{ needs.deploy-dev.result == 'success' && '✅ Success' || needs.deploy-dev.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Basic Sentinel deployment |" >> $GITHUB_STEP_SUMMARY
          echo "| Staging | ${{ needs.deploy-staging.result == 'success' && '✅ Success' || needs.deploy-staging.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Full detection rules deployed |" >> $GITHUB_STEP_SUMMARY
          echo "| Production | ${{ needs.deploy-prod.result == 'success' && '✅ Success' || needs.deploy-prod.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Enterprise security operations |" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Configure data connectors in Azure portal" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Enable UEBA for production environment" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Review and tune detection rules" >> $GITHUB_STEP_SUMMARY
          echo "- [ ] Set up incident response procedures" >> $GITHUB_STEP_SUMMARY
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: environments/dev

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: environments/dev

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: environments/dev

      - name: Output Deployment Info
        run: |
          echo "## 🚀 Development Deployment Complete" >> $GITHUB_STEP_SUMMARY
          terraform output -json > outputs.json
          echo "**Workspace ID:** $(jq -r '.workspace_id.value' outputs.json)" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group:** $(jq -r '.resource_group_name.value' outputs.json)" >> $GITHUB_STEP_SUMMARY
        working-directory: environments/dev

  # =============================================================================
  # STAGING ENVIRONMENT DEPLOYMENT
  # =============================================================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [determine-deployments, deploy-dev]
    if: needs.determine-deployments.outputs.deploy_staging == 'true' && always() && (needs.deploy-dev.result == 'success' || needs.deploy-dev.result == 'skipped')
    environment:
      name: staging
      url: https://portal.azure.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
